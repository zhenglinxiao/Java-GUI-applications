/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package weatherforecast;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author cstuser
 */
public class WeatherForecastGUI extends javax.swing.JFrame {

    /**
     * Creates new form WeatherForecastGUI
     */
    public WeatherForecastGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weatherIconPanel = new weatherforecast.ImagePanel();
        titleLabel = new javax.swing.JLabel();
        temperatureInput = new javax.swing.JTextField();
        degreeLabel = new javax.swing.JLabel();
        precipitationCheckBox = new javax.swing.JCheckBox();
        nightCheckBox = new javax.swing.JCheckBox();
        fahrenheitCheckBox = new javax.swing.JCheckBox();
        setIconButton = new javax.swing.JButton();
        todayWeatherButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        weatherMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        overrideMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout weatherIconPanelLayout = new javax.swing.GroupLayout(weatherIconPanel);
        weatherIconPanel.setLayout(weatherIconPanelLayout);
        weatherIconPanelLayout.setHorizontalGroup(
            weatherIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        weatherIconPanelLayout.setVerticalGroup(
            weatherIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 137, Short.MAX_VALUE)
        );

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Weather Forecast");

        degreeLabel.setText("Degrees");

        precipitationCheckBox.setText("Precipitations?");

        nightCheckBox.setText("Night?");

        fahrenheitCheckBox.setText("Fahrenheit?");

        setIconButton.setText("Set Icon");
        setIconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIconButtonActionPerformed(evt);
            }
        });

        todayWeatherButton.setText("Today's Weather");
        todayWeatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayWeatherButtonActionPerformed(evt);
            }
        });

        messageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("Welcome! Enter a temperature! ");

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        overrideMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        overrideMenuItem.setText("Override");
        overrideMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overrideMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(overrideMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        weatherMenuBar.add(fileMenu);

        setJMenuBar(weatherMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(temperatureInput, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(degreeLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nightCheckBox)
                                    .addComponent(precipitationCheckBox)
                                    .addComponent(fahrenheitCheckBox)))
                            .addComponent(setIconButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(weatherIconPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(todayWeatherButton, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weatherIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temperatureInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degreeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(precipitationCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nightCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fahrenheitCheckBox)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setIconButton)
                    .addComponent(todayWeatherButton))
                .addGap(27, 27, 27)
                .addComponent(messageLabel)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        // TODO add your handling code here:

        // Quit application
        
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void setIconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIconButtonActionPerformed
        // TODO add your handling code here:

        // Display the right feedback message and set corresponding icon
        
        // This method of displaying the icons can throw an exception and break
        // the program. It's only valid if you know the files exist or if you catch it 
        // generally at the end. 
        
        String feedback = "";
        double temperature = 0;

        try {
            temperature = Double.parseDouble(temperatureInput.getText());

            if (nightCheckBox.isSelected()) {
                feedback += "Tonight it's ";
            } 
            else {
                feedback += "Today it's ";
            }

            if (precipitationCheckBox.isSelected()) {
                if (fahrenheitCheckBox.isSelected()) {
                    if (temperature <= 32) {
                        feedback += "snowing ";
                        if(nightCheckBox.isSelected()){
                            weatherIconPanel.setImage("./images\\snowing_night.png");
                        }
                        else{
                            weatherIconPanel.setImage("./images\\snowing.png");
                        }
                    } 
                    else {
                        feedback += "raining ";
                        if(nightCheckBox.isSelected()){
                            weatherIconPanel.setImage("./images\\raining_night.png");
                        }
                        else{
                            weatherIconPanel.setImage("./images\\raining.png");
                        }
                    }
                } 
                else {
                    if (temperature <= 0) {
                        feedback += "snowing ";
                        if(nightCheckBox.isSelected()){
                            weatherIconPanel.setImage("./images\\snowing_night.png");
                        }
                        else{
                            weatherIconPanel.setImage("./images\\snowing.png");
                        }
                    } 
                    else {
                        feedback += "raining ";
                         if(nightCheckBox.isSelected()){
                            weatherIconPanel.setImage("./images\\raining_night.png");
                        }
                        else{
                            weatherIconPanel.setImage("./images\\raining.png");
                        }
                    }
                }
            } 
            else {
                feedback += "clear skies ";
                if(nightCheckBox.isSelected()){
                    weatherIconPanel.setImage("./images\\clear_night.png");
                }
                else{
                    weatherIconPanel.setImage("./images\\clear.png");
                }
            }

            feedback += "with a temperature of " + temperature;

            if (fahrenheitCheckBox.isSelected()) {
                feedback += " °F.";
            } 
            else {
                feedback += " °C.";
            }

            messageLabel.setText(feedback);   
        } 
        
        catch (NumberFormatException e) {
            messageLabel.setText("Please enter a temperature.");
            weatherIconPanel.setImage("./images\\error.png");
        }
        catch (Exception e){
            messageLabel.setText("Something went wrong with the imaging.");
            try{
                weatherIconPanel.setImage(ImageIO.read(new File("./images\\error.png")));
            }
            catch(IOException io){
                // Error image does not exist. Not a big deal for the user.
            }
        }
    }//GEN-LAST:event_setIconButtonActionPerformed

    private void todayWeatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todayWeatherButtonActionPerformed
        // TODO add your handling code here:

        // Display the right feedback message
        
        // Using the ImageIO.read(new File()) method would force you to catch an exception.
        // Which is a better practice technically. You can also use "/" instead of "\\".
        
        temperatureInput.setText("10.0");
        
        String feedback = "";
        double temperature = 0;

        try {
            temperature = Double.parseDouble(temperatureInput.getText());

            if (nightCheckBox.isSelected()) {
                nightCheckBox.doClick(1); 
            }
            
            if(fahrenheitCheckBox.isSelected()){
                fahrenheitCheckBox.doClick(1);
            }

            if (!precipitationCheckBox.isSelected()){
                precipitationCheckBox.doClick(1);
            }
                
            feedback += "Today it's raining with a temperature of " + temperature + " °C.";

            messageLabel.setText(feedback);    
        } 
        
        catch (NumberFormatException e) {
            messageLabel.setText("Please enter a temperature.");
            weatherIconPanel.setImage("./images/error.png");
            
        }

        // Display "raining.png" icon
        
        try{
            weatherIconPanel.setImage("./images/raining.png");
        }
        catch(Exception e){
            messageLabel.setText("Something went wrong with the imaging.");
            try{
                weatherIconPanel.setImage(ImageIO.read(new File("./images/error.png")));
            }
            catch(IOException io){
                // Error image does not exist. Not a big deal for the user.
            }
        }
 
        
        
    }//GEN-LAST:event_todayWeatherButtonActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void overrideMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overrideMenuItemActionPerformed
        // TODO add your handling code here:

        // Open a filechooser dialog at ./images and replace icon with selected one
        
        final JFileChooser fc = new JFileChooser();
        
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathName) {
                String[] acceptedExtensions = {".jpg", ".jpeg", ".png", ".gif", ".tif", ".tiff"};

                for (String ext : acceptedExtensions) {
                    if (pathName.getName().toLowerCase().endsWith(ext)) {
                        return true;
                    }
                }

                return false;
            }

            @Override
            public String getDescription() {
                return "Images files";
            }
        });
        
        fc.setCurrentDirectory(new File("./images"));
        
        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                weatherIconPanel.setImage(ImageIO.read(file));
                messageLabel.setText("Override successful.");
                //originalImagePanel.setImage(file.getPath()); --> alternative
            } catch (IOException ex) {
                weatherIconPanel.setImage("./images\\error.png");
                messageLabel.setText("Override failed, please try again.");
            }
        } else {
            //Let dialog close
            messageLabel.setText("You did not select an image!");
        }     
    }//GEN-LAST:event_overrideMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherForecastGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherForecastGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherForecastGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherForecastGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherForecastGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel degreeLabel;
    private javax.swing.JCheckBox fahrenheitCheckBox;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JCheckBox nightCheckBox;
    private javax.swing.JMenuItem overrideMenuItem;
    private javax.swing.JCheckBox precipitationCheckBox;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton setIconButton;
    private javax.swing.JTextField temperatureInput;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton todayWeatherButton;
    private weatherforecast.ImagePanel weatherIconPanel;
    private javax.swing.JMenuBar weatherMenuBar;
    // End of variables declaration//GEN-END:variables
}
