/*
Purpose: 

This Image Processing GUI allows the user to open an image file and
apply filters to edit the image. They can then save it using either the integrated 
menu or the dedicated save button. It is made so that the user has to open an image before they can 
save or apply any filters in order to be user friendly.

Author(s): Jose Fernandez, Lin Xiao Zheng
-----------------------------------------------------------------------------------------------------*/
package imageprocessor;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;


public class ImageProcessor extends javax.swing.JFrame {

    /**
     * Creates new form ImageProcessor
     */
    public ImageProcessor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        originalImagePanel = new imageprocessor.ImagePanel();
        editedImagePanel = new imageprocessor.ImagePanel();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        boxButton = new javax.swing.JLabel();
        gaussianButton = new javax.swing.JLabel();
        edgeButton = new javax.swing.JLabel();
        gammaButton = new javax.swing.JLabel();
        greyScaleLabel = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        boxBlurCheckBox = new javax.swing.JCheckBox();
        gaussianBlurCheckBox = new javax.swing.JCheckBox();
        edgeDetectionCheckBox = new javax.swing.JCheckBox();
        greyScaleCheckBox = new javax.swing.JCheckBox();
        gammaCorrectionSlider = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Processor");

        javax.swing.GroupLayout originalImagePanelLayout = new javax.swing.GroupLayout(originalImagePanel);
        originalImagePanel.setLayout(originalImagePanelLayout);
        originalImagePanelLayout.setHorizontalGroup(
            originalImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        originalImagePanelLayout.setVerticalGroup(
            originalImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout editedImagePanelLayout = new javax.swing.GroupLayout(editedImagePanel);
        editedImagePanel.setLayout(editedImagePanelLayout);
        editedImagePanelLayout.setHorizontalGroup(
            editedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );
        editedImagePanelLayout.setVerticalGroup(
            editedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        messageLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        boxButton.setText("Box Blur Filter :");

        gaussianButton.setText("Gaussian Blur Filter :");

        edgeButton.setText("Edge Detection Filter :");

        gammaButton.setText("Gamma Correction :");

        greyScaleLabel.setText("Convert to Grey Scale :");

        applyButton.setText("Apply");
        applyButton.setEnabled(false);
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        gammaCorrectionSlider.setMaximum(200);
        gammaCorrectionSlider.setMinimum(1);
        gammaCorrectionSlider.setValue(100);

        jMenu1.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(greyScaleLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(gammaButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(edgeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(gaussianButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(boxButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addComponent(gammaCorrectionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(gaussianBlurCheckBox)
                                                    .addComponent(edgeDetectionCheckBox)
                                                    .addComponent(boxBlurCheckBox)
                                                    .addComponent(greyScaleCheckBox))))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(originalImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addComponent(editedImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87))
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(editedImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(originalImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(saveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxButton)
                    .addComponent(boxBlurCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gaussianButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edgeButton)
                            .addComponent(edgeDetectionCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(greyScaleLabel)
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gammaButton)
                                    .addComponent(gammaCorrectionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(greyScaleCheckBox)))
                    .addComponent(gaussianBlurCheckBox))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        // TODO add your handling code here:

        BufferedImage input = originalImagePanel.getBufferedImage();
 

        if (boxBlurCheckBox.isSelected()) {
            input = ImageProcessing.applyBoxBlur(input, 1);
        }

        if (edgeDetectionCheckBox.isSelected()) {
            input = ImageProcessing.applyEdgeDetection(input);
        }

        if (gaussianBlurCheckBox.isSelected()) {
            input = ImageProcessing.applyGaussianBlur(input);
        }
        
        if (gammaCorrectionSlider.getValue() / 100.0 != 1.00) {
            input = ImageProcessing.applyGammaCorrection(input, gammaCorrectionSlider.getValue());
        }
        
        if (greyScaleCheckBox.isSelected()) {
            input = ImageProcessing.applyGreyScaleConversion(input);
        }

        editedImagePanel.setImage(input);
        messageLabel.setForeground(Color.BLACK);
        messageLabel.setText("Image successfully processed!");
    }//GEN-LAST:event_applyButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:

        final JFileChooser fc = new JFileChooser();

        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathName) {
                String[] acceptedExtensions = {".jpg", ".jpeg", ".png", ".bmg"};

                for (String ext : acceptedExtensions) {
                    if (pathName.getName().toLowerCase().endsWith(ext)) {
                        return true;
                    }
                }

                return false;
            }

            @Override
            public String getDescription() {
                return "Images files";
            }
        });

        fc.setCurrentDirectory(new File("./images"));

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getName().toLowerCase();
            
            // Getting extension of selected file
            int i = filePath.lastIndexOf(".");
                    if (i > 0) {
                        ext = file.getName().substring(i + 1);
                    }

            if (!(filePath.endsWith(".png") || filePath.endsWith(".jpg") || filePath.endsWith(".jpeg") ||  filePath.endsWith(".bmg"))) {
                // if(ImageIO.read(file) == null) --> alternative
                try {
                    originalImagePanel.setImage(ImageIO.read(new File("./images\\error.png")));
                    messageLabel.setForeground(Color.RED);
                    messageLabel.setText("Whoops! Please choose a valid image file.");
                    applyButton.setEnabled(false);
                    saveButton.setEnabled(false);
                } catch (IOException ex) {
                    Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    originalImagePanel.setImage(ImageIO.read(file));
                    messageLabel.setForeground(Color.BLACK);
                    messageLabel.setText("Image loaded successfully.");
                    applyButton.setEnabled(true);
                    saveButton.setEnabled(true);
                    //originalImagePanel.setImage(file.getPath()); --> alternative
                } catch (IOException ex) {
                    Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            messageLabel.setText("You did not select an image!");
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        
        if(editedImagePanel.getBufferedImage() == null){
            messageLabel.setForeground(Color.red);
            messageLabel.setText("You have not applied any filters yet!"); 
            editedImagePanel.setImage("./images\\error.png");
            return;
        }
        
        final JFileChooser fc = new JFileChooser();

        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathName) {
                String[] acceptedExtensions = {".jpg", ".jpeg", ".png", ".bmg"};

                for (String ext : acceptedExtensions) {
                    if (pathName.getName().toLowerCase().endsWith(ext)) {
                        return true;
                    }
                }

                return false;
            }

            @Override
            public String getDescription() {
                return "Images files";
            }
        });

        fc.setCurrentDirectory(new File("./images"));

        int returnVal = fc.showSaveDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getAbsolutePath();
            String fileName = filePath;
            
            int i = filePath.lastIndexOf(".");
                    if (i > 0){
                        fileName = filePath.substring(0, i);
                    }
            try {
                if (!(filePath.endsWith("." + ext))) {
                    // Add same extension as opened file
                    ImageIO.write(editedImagePanel.getBufferedImage(), ext, new File(fileName + "." + ext));
                } else {
                    ImageIO.write(editedImagePanel.getBufferedImage(), ext, file);
                }
            } catch (IOException ex) {
                Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            messageLabel.setText("Your image was not saved.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        
        final JFileChooser fc = new JFileChooser();

        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathName) {
                String[] acceptedExtensions = {".jpg", ".jpeg", ".png", ".bmg"};

                for (String ext : acceptedExtensions) {
                    if (pathName.getName().toLowerCase().endsWith(ext)) {
                        return true;
                    }
                }

                return false;
            }

            @Override
            public String getDescription() {
                return "Images files";
            }
        });

        fc.setCurrentDirectory(new File("./images"));

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getName().toLowerCase();
            
            // Getting extension of selected file
            int i = filePath.lastIndexOf(".");
                    if (i > 0) {
                        ext = file.getName().substring(i + 1);
                    }

            if (!(filePath.endsWith(".png") || filePath.endsWith(".jpg") || filePath.endsWith(".jpeg") ||  filePath.endsWith(".bmg"))) {
                // if(ImageIO.read(file) == null) --> alternative
                try {
                    originalImagePanel.setImage(ImageIO.read(new File("./images\\error.png")));
                    messageLabel.setForeground(Color.red);
                    messageLabel.setText("Whoops! Please choose a valid image file.");
                    applyButton.setEnabled(false);
                    saveButton.setEnabled(false);
                } catch (IOException ex) {
                    Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    originalImagePanel.setImage(ImageIO.read(file));
                    messageLabel.setForeground(Color.BLACK);
                    messageLabel.setText("Image loaded successfully.");
                    applyButton.setEnabled(true);
                    saveButton.setEnabled(true);
                    //originalImagePanel.setImage(file.getPath()); --> alternative
                } catch (IOException ex) {
                    Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            messageLabel.setText("You did not select an image!");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        
        if(editedImagePanel.getBufferedImage() == null){
            messageLabel.setForeground(Color.red);
            messageLabel.setText("You have not applied any filters yet!"); 
            editedImagePanel.setImage("./images\\error.png");
            return;
        }
        
        final JFileChooser fc = new JFileChooser();

        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathName) {
                String[] acceptedExtensions = {".jpg", ".jpeg", ".png", ".bmg"};

                for (String ext : acceptedExtensions) {
                    if (pathName.getName().toLowerCase().endsWith(ext)) {
                        return true;
                    }
                }

                return false;
            }

            @Override
            public String getDescription() {
                return "Images files";
            }
        });

        fc.setCurrentDirectory(new File("./images"));

        int returnVal = fc.showSaveDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getAbsolutePath();
            String fileName = filePath;
            
            int i = filePath.lastIndexOf(".");
                    if (i > 0){
                        fileName = filePath.substring(0, i);
                    }
            try {
                if (!(filePath.endsWith("." + ext))) {
                    // Add same extension as opened file
                    ImageIO.write(editedImagePanel.getBufferedImage(), ext, new File(fileName + "." + ext));
                } else {
                    ImageIO.write(editedImagePanel.getBufferedImage(), ext, file);
                }
            } catch (IOException ex) {
                Logger.getLogger(ImageProcessor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            messageLabel.setText("Your image was not saved.");
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageProcessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageProcessor().setVisible(true);
            }
        });
    }
    
    private String ext;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JCheckBox boxBlurCheckBox;
    private javax.swing.JLabel boxButton;
    private javax.swing.JLabel edgeButton;
    private javax.swing.JCheckBox edgeDetectionCheckBox;
    private imageprocessor.ImagePanel editedImagePanel;
    private javax.swing.JLabel gammaButton;
    private javax.swing.JSlider gammaCorrectionSlider;
    private javax.swing.JCheckBox gaussianBlurCheckBox;
    private javax.swing.JLabel gaussianButton;
    private javax.swing.JCheckBox greyScaleCheckBox;
    private javax.swing.JLabel greyScaleLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private imageprocessor.ImagePanel originalImagePanel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
